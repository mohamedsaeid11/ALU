module cmp_unit 

#(parameter width = 16 ) 

( 

input wire [width - 1 : 0] A  ,
input wire [width - 1 : 0] B  , 
input wire [1:0]ALU_FUN  ,
input wire cmp_enable ,
input wire clk  , 
input wire reset ,
output reg [width - 1 : 0]cmp_out  ,
output reg cmp_flag 

) ; 

reg [width - 1 : 0 ]cmp_comb ;
reg cmp_flag_comb ; 

always @(posedge clk or negedge reset) 
begin 
if (!reset) 
   begin 
cmp_out <= 'd0 ; 
cmp_flag <= 1'b0 ; 
   end 
else 
    begin 
cmp_out <= cmp_comb ; 
cmp_flag <= cmp_flag_comb ; 
    end  
 end 
 

 always @(*) 
  
 begin 
 cmp_flag_comb = 1'b0 ; 
 cmp_comb = 'd0 ;
 
			if (cmp_enable) 
				begin 
				cmp_flag_comb = 1 ;
					case (ALU_FUN) 
					
	                2'b01 : begin 
					if( A == B )
                       cmp_comb = 'd1	;  
					   else 
					   cmp_comb = 'd0 ; 
					        end 
                    

					 2'b10 : begin 
					if( A > B )
                       cmp_comb = 'd2	;  
					   else 
					   cmp_comb = 'd0 ; 
					        end 
					   
					    2'b11 : begin 
					if( A < B )
                       cmp_comb = 'd3	;  
					   else 
					   cmp_comb = 'd0 ; 
					        end 
                  
					   
					   default : begin 
					   cmp_comb = 'd0  ; 
					   cmp_flag_comb = 1'b0 ;
					             end 
			    	endcase 
				end 	
	        else 
	           begin 
			   cmp_comb = 'd0 ; 
			   cmp_flag_comb = 1'b0 ; 
			   end 

 end 
 
 endmodule 
 
